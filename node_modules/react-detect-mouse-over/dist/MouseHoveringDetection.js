'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MouseHoveringDetection = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isMouseOverElement = function isMouseOverElement(_ref) {
    var elem = _ref.elem,
        e = _ref.e;
    var pageY = e.pageY,
        pageX = e.pageX;

    var _elem$getBoundingClie = elem.getBoundingClientRect(),
        left = _elem$getBoundingClie.left,
        right = _elem$getBoundingClie.right,
        bottom = _elem$getBoundingClie.bottom,
        top = _elem$getBoundingClie.top;

    return pageX > left && pageX < right && pageY > top && pageY < bottom;
};

var MouseHoveringDetection = exports.MouseHoveringDetection = function MouseHoveringDetection(DecoratedComponent) {
    var MouseHoveringDetection = function (_Component) {
        _inherits(MouseHoveringDetection, _Component);

        function MouseHoveringDetection() {
            _classCallCheck(this, MouseHoveringDetection);

            var _this = _possibleConstructorReturn(this, (MouseHoveringDetection.__proto__ || Object.getPrototypeOf(MouseHoveringDetection)).call(this));

            _this.onMouseMove = function (e) {
                var decoratedComponentDiv = (0, _reactDom.findDOMNode)(_this.refs.decoratedComponent);

                _this.setState({ isHoveringOver: isMouseOverElement({ elem: decoratedComponentDiv, e: e }) });
            };

            _this.state = {
                isHoveringOver: false
            };
            return _this;
        }

        _createClass(MouseHoveringDetection, [{
            key: 'componentDidMount',
            value: function componentDidMount() {
                document.body.addEventListener('mousemove', this.onMouseMove);
            }
        }, {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
                document.body.removeEventListener('mousemove', this.onMouseMove);
            }
        }, {
            key: 'render',
            value: function render() {
                var isHoveringOver = this.state.isHoveringOver;


                return _react2.default.createElement(DecoratedComponent, _extends({
                    ref: 'decoratedComponent'
                }, this.props, {
                    isHoveringOver: isHoveringOver
                }));
            }
        }]);

        return MouseHoveringDetection;
    }(_react.PureComponent);

    MouseHoveringDetection.displayName = 'MouseHoveringDetection(' + DecoratedComponent.displayName + ')';

    return MouseHoveringDetection;
};